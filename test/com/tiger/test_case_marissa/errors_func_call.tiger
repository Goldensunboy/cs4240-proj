
type ArrayInt = array [100] of int;

/* Used in testing */
void function testFunc()
begin
	begin
		var a, b : int :=0;
		a := 9;
	end;
end; 

int function testFunc2() 
begin
	begin
		var a, b : int :=0;
		return a;
	end;
end; 
fixedpt function testFunc3() 
begin
	begin
		var a : fixedpt := 5.0;
		return a;
	end;
end; 
void function testFunc4(x:int, y:fixedpt) 
begin
	begin
		var x, b : int :=0;
		x := 8;
	end;
end;
int function testFunc5(x:ArrayInt) 
begin
	begin
		var a, b : int :=0;
		return a;
	end;
end; 
int function testFunc6(x:int, y:fixedpt) 
begin
	begin
		var x, b : int :=0;
		return 8;
	end;
end;
int function testFunc7(x:int) 
begin
	begin
		var x, b : int :=0;
		return 8;
	end;
end;

fixedpt function testFunc8(x:int, y:fixedpt) 
begin
	begin
		var x, b : int :=0;
		return 8;
	end;
end;

fixedpt function testFunc9(x:int) 
begin
	begin
		var x, b : int :=0;
		return 8;
	end;
end;

void function testFunc9b(x:int) 
begin
	begin
		var x, b : int :=0;
		return 8;
	end;
end;


/*  (Does not give a proper error message) Cannot assign a void return value to a variable. */ 
void function func8b()
begin
	begin
		var x : fixedpt :=0;
		x := testFunc();
	end;
end; 


/* Cannot call a function with parameters of the wrong type (fixedpt instead of int) */ 
void function func1()
begin
	begin
		var x : int :=0;
		testFunc4(5.0,5);
	end;
end; 

/* Cannot call a function with parameters of the wrong type (fixedpt instead of int) */ 
void function func2a()
begin
	begin
		var x : fixedpt :=0;
		testFunc4(x,5);
	end;
end; 

/* Cannot call a function with parameters of the wrong type (fixedpt instead of int) */ 
void function func2b()
begin
	begin
		var x : fixedpt :=0;
		x := testFunc9(3.0);
	end;
end; 

/* Cannot call a function with parameters of the wrong type (fixedpt instead of int) */ 
void function func2c()
begin
	begin
		var x : fixedpt :=0;
		x := testFunc6(3.0,5); 
	end;
end;

/*  (Does not give a proper error message) Cannot call a function with missing parameters. */ 
void function func3ab()
begin
	begin
		var x : fixedpt :=0;
		testFunc4(x);
	end;
end; 

/* Cannot call a function with missing parameters. */ 
void function func4()
begin
	begin
		var x : fixedpt :=0;
		testFunc4();
	end;
end; 

/*  (Does not give a proper error message) Cannot call a function with additional parameters. */ 
void function func5()
begin
	begin
		var x : fixedpt :=0;
		testFunc4(x,5,6);
	end;
end; 

/*  (Does not give a proper error message) Cannot call a function with additional parameters. */ SKIP_S
void function func5b()
begin
	begin
		var x : fixedpt :=0;
		x := testFunc4(x);
	end;
end; 

/*  (Does not give a proper error message) Cannot call a function with additional parameters that are variables. */ 
void function func6()
begin
	begin
		var x : fixedpt :=0;
		testFunc3(x);
	end;
end; 

/*  (Does not give a proper error message) Cannot call a function with additional parameters that are literals. */ 
void function func7()
begin
	begin
		var x : fixedpt :=0;
		testFunc3(5);
	end;
end; 

/*  (Does not give a proper error message) Cannot assign a void return value to a variable. */ 
void function func8()
begin
	begin
		var x : fixedpt :=0;
		x := testFunc();
	end;
end; 

/* Should not be able to assign a fixedpt to an int */ 
void function func11()
begin
	begin
		var x : int :=0;
		x := testFunc3();
	end;
end; 

/* Cannot pass an undeclared variable into a function */ 
void function func12()
begin
	begin
		var x : fixedpt :=0;
		testFunc9(y);
	end;
end; 

/*  Cannot assign the return value of a function to an undeclared variable. */ 
void function func13()
begin
	begin
		var x : fixedpt :=0;
		y := testFunc7(5);
	end;
end; 
SKIP_E
/* TODO should not be able to pass an int instead of an array of ints */ 
void function func14a()
begin
	begin
		var Y : int := 0;
		testFunc5(Y);
	end;
end; 
SKIP_S
/* TODO should not be able to pass an int instead of an array of ints */ 
void function func14b()
begin
	begin
		var Y : int := 0;
		var x : int := 0;
		x := testFunc5(Y);
	end;
end; 
SKIP_E
/* TODO should not be able to pass a fixedpt instead of an array of ints */ 
void function func15a()
begin
	begin
		var Y : fixedpt := 0;
		testFunc5(Y);
	end;
end; 
SKIP_S
/* TODO should not be able to pass a fixedpt instead of an array of ints */ 
void function func15b()
begin
	begin
		var Y : fixedpt := 0;
		var x : int := 0;
		x := testFunc5(Y);
	end;
end; 
SKIP_E
/* Should not be able to assign a fixedpt return value to an int */ 
void function func16()
begin
	begin
		var x : int :=0;
		x := testFunc3();
	end;
end; 



void main()
begin
	begin
		var x : int := 10;
		x := 2;
	end;
end;