/* This file should compile */

type Int = int;
type ArrayInt = array [100] of int;
type Array2DInt = array [100][100] of int;
type FixedPt = fixedpt;
type ArrayFixedPt = array [100] of fixedpt;
type Array2DFixedPt = array [100][100] of fixedpt;
int function testFunc(x:int) 
begin
	begin
		var a, b : int :=0;
		return b;
	end;
end;

int function testFunc2(x:ArrayInt) 
begin
	begin
		var a, b : int :=0;
		return b;
	end;
end;

/* TODO: Should not be able to assign aggregate values more than once */
void function funcName2() 
begin
	begin
		var x : ArrayInt := 9;
		x := 10;
	end;
end;


/* TODO: Cannot assign arrays of different types to each other  */
void function funcName3() 
begin
	begin
		var x : ArrayInt := 9;
		var y : Array2DInt := 10;
		x := y;
	end;
end;

/* TODO: Cannot assign arrays of different types to each other  */
void function funcName4() 
begin
	begin
		var x : ArrayInt := 9;
		var y : ArrayFixedPt := 10;
		x := y;
	end;
end;

/* Cannot instantiate an array without using a type  */ /*
void function funcName5() 
begin
	begin
		var x : array [99] of int := 0;
		x := y;
	end;
end; */

/* TODO: Should not be able to pass an int instead of an int array */
void function funcName6() 
begin
	begin
		var x : int;
		testFunc2(x);
	end;
end;

/* TODO: Should not be able to pass an int array instead of an int */ /*
void function funcName7() 
begin
	begin
		var x : ArrayInt := 9;
		testFunc(x);
	end;
end; */


void main()
begin
	begin
		var x : int := 10;
		x := 2;
	end;
end;


