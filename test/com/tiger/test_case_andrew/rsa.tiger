int function mod(u : int, v : int)
begin
	begin
		var t : int := 0;
		while u >= v do
			u := u - v;
		enddo;
		return u;
	end;
end;

int function pow(x : int, n : int)
begin
	begin
		var t : int := 0;
		if n = 0 then
			return 1;
		else
			t := pow(x, n - 1);
			return x * t;
		endif;
	end;
end;

int function modPow(x : int, n : int, m : int)
begin
	begin
		var t : int := 0;
		if n = 0 then
			return 1;
		else
			t := modPow(x, n - 1, m);
			t := x * t;
			t := mod(t, m);
			return t;
		endif;
	end;
end;

int function gcd(a : int, b : int)
begin
	begin
		var t : int := 0;
		if a = b then
			return a;
		else
			if a > b then
				t := gcd(a - b, b);
			else
				t := gcd(a, b - a);
			endif;
			return t;
		endif;
		return 0;
	end;
end;

int function modularInverse(x : int, m : int)
begin
	begin
		var n, t : int := 1;
		while n < 1000 do
			t := mod(x * n, m);
			if t = 1 then
				return n;
			else
				n := n + 1;
			endif;
		enddo;
		return 0;
	end;
end;

int function genkey(p : int, q : int, isPrivKey : int)
begin
	begin
		var phi, e, d, t : int := 0;
		phi := (p - 1) * (q - 1);
		e := phi - 1;
		while e > 1 do
			t := gcd(e, phi);
			if t = 1 then
				break;
			else
				e := e - 1;
			endif;
		enddo;
		if e = 1 then
			return 0;
		else
			if isPrivKey = 0 then
				return e;
			endif;
		endif;
		d := modularInverse(e, phi);
		return d;
	end;
end;

void main()
begin
	begin
		var pub1, pub2, priv1, priv2, n1, n2, message, message2, ciphertext : int := 0;
		var p1 : int := 3;
		var q1 : int := 11;
		var p2 : int := 5;
		var q2 : int := 7;
		var t : fixedpt := 0;
		
		n1 := p1 * q1;
		n2 := p2 * q2;
		pub1  := genkey(p1, q1, 0);
		priv1 := genkey(p1, q1, 1);
		pub2  := genkey(p2, q2, 0);
		priv2 := genkey(p2, q2, 1);
		
		message := 45;
		ciphertext := modPow(message, pub2, n2);
		message2 := modPow(ciphertext, priv2, n2);
		
		Print_int(message2);
		
		message := 61;
		ciphertext := modPow(message, pub1, n1);
		message2 := modPow(ciphertext, priv1, n1);
		
		Print_int(message2);
	end;
end;