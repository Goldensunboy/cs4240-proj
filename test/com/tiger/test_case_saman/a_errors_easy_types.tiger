type Int = int;
type Int_Type = int;
type Int_Type2 = int;
type ArrayInt = array [100] of int;
type Array2DInt = array [100][100] of int;
type FixedPtLit = fixedpt;
type Fixedpt_Type = fixedpt;
type Fixedpt_Type2 = fixedpt;
type ArrayFixedPt = array [100] of fixedpt;
type Array2DFixedPt = array [100][100] of fixedpt;

void function func() 
begin
	begin
		var int_var : int := 5;
		var fixedpt_var : fixedpt := 5.0;
		var int_type_var : Int_Type := 5;
		var fixedpt_var2 : fixedpt := 5.0;
		var int_var2 : Int_Type := 5;
		var fixedpt_type_var : Fixedpt_Type := 5.0;
		var int_type_var2 : Int_Type := 5;
		var fixedpt_type_var2 : Fixedpt_Type := 5.0;
		var int_type2_var : Int_Type2 := 5;
		var fixedpt_type2_var : Fixedpt_Type2 := 5.0;
		
		int_var := 5.0;
		int_var := int_var + 5.0;
		int_var := fixedpt_var + int_var;
		int_type_var := 5;                                                          
		int_type_var := 5.0;
		fixedpt_type_var := 5.0;                                                 
		fixedpt_type_var := 5;
		int_type_var := fixedpt_type_var;
		fixedpt_type_var := int_type_var;
		int_type_var := int_type_var + 5.0;
		int_type_var := int_type_var + 5;
		fixedpt_type_var := fixedpt_type_var + 5;
		fixedpt_type_var := fixedpt_type_var + 5.0;
		int_type_var := int_var + fixedpt_var;
		fixedpt_type_var := fixedpt_var + int_type_var;
		int_type_var := int_type_var + fixedpt_type_var;
		fixedpt_type_var := fixedpt_type_var + int_type_var;
		fixedpt_type_var := 5 + 5.5 * fixedpt_var;
		fixedpt_type_var := 5 + 5.5 * fixedpt_type_var;
		fixedpt_type_var := fixedpt_var * int_var + int_type_var;
		int_type_var := int_var;                                 /* Illegal - type mixin not allowed except in initialization - not name type equivalent */
		fixedpt_type_var := fixedpt_var;                                 /* Illegal - type mixin not allowed except in initialization - not name type equivalent */
		int_var := int_type_var;                                 /* Illegal - not name equivalent */
		fixedpt_var := fixedpt_type_var;                                 /* Illegal - not name equivalent */
		int_type_var := int_var + 5;                                 /* Illegal - type mixin not allowed except in initialization - not name type equivalent - rhs is type int_var */
		fixedpt_type_var := fixedpt_var + 5.0;                                 /* Illegal - type mixin not allowed except in initialization - not name type equivalent - rhs is type fixedpt_var */
		int_type_var := int_type_var + int_var;                                 /* Illegal mixin on rhs types - no implicit conversion (promotion) between a base type and derived type */
		fixedpt_type_var := fixedpt_type_var + fixedpt_var;                                 /* Illegal due to the same reason as above */
		int_var := int_type_var + int_var;                                 /* Illegal expression on rhs - cant add the vars - not name equivalent */
		fixedpt_var := fixedpt_type_var + fixedpt_var;                                 /* Illegal - same reason as above */
		fixedpt_type_var := 5 * 5.5 + fixedpt_var;                                 /* first 5 is promoted to 5.0 (implicit base type conversion) and thus first subexpression 5 * 5.5 is eval as fixedpt and thus due to type equivalence whole expr legal but assignment of fixedpt_var to fixedpt_type_var illegal */
		fixedpt_type_var := 5 * 5.5 + fixedpt_type_var;                                 /* First subexpression OK as above - second part (fixedpt_type_var) mixin is illegal - no implicit type conversion except in base types */
		fixedpt_type_var := fixedpt_var * 5 + fixedpt_type_var;                         /* first expression fixedpt_var * 5 is legal via promotion of 5 to base type fixedpt (like 5.0) - second part + fixed_type_var illegal due to type mixing as in above example */ /* Recheck this one again - I had made a mistake - it was late night */
		fixedpt_type_var := fixedpt_var * int_var + fixedpt_type_var;                                 /* first expression fixedpt_var * int_var is legal via promotion of int_var to base type fixedpt - second part illegal type mixin */

		int_type_var := int_type2_var;
		int_type_var := int_type_var + int_type2_var;
		int_type_var := int_type_var * int_type2_var;
		int_type_var := int_type2_var * int_type2_var;
		
		int_type_var := int_type2_var * (int_var + int_type2_var);
		int_type_var := int_type2_var + 2;
		int_type_var := int_type2_var * 2.0;
		int_type_var := int_type2_var * int_var;
		int_type_var := int_type2_var * (2 + int_type2_var);
		int_type_var := int_type2_var * (2.0 + int_type2_var);
		int_type_var := int_type2_var * (int_type_var + int_type2_var);
		int_type_var := int_type2_var * (int_type_var + int_type2_var);
		
		fixedpt_type_var := fixedpt_type2_var;
		fixedpt_type_var := fixedpt_type_var + fixedpt_type2_var;
		fixedpt_type_var := fixedpt_type_var * fixedpt_type2_var;
		fixedpt_type_var := fixedpt_type2_var * fixedpt_type2_var;
		
		fixedpt_type_var := fixedpt_type2_var * (fixedpt_var + fixedpt_type2_var);
		fixedpt_type_var := fixedpt_type2_var + 2;
		fixedpt_type_var := fixedpt_type2_var * 2.0;
		fixedpt_type_var := fixedpt_type2_var * fixedpt_var;
		fixedpt_type_var := fixedpt_type2_var * (2 + fixedpt_type2_var);
		fixedpt_type_var := fixedpt_type2_var * (2.0 + fixedpt_type2_var);
		fixedpt_type_var := fixedpt_type2_var * (fixedpt_type_var + fixedpt_type2_var);
		fixedpt_type_var := fixedpt_type2_var * (fixedpt_type_var + fixedpt_type2_var);
	end;
end;




void main()
begin
	begin
		var x : int := 10;
		x := 2;
	end;
end;

